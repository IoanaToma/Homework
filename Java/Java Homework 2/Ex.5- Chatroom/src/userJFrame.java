import java.util.*;
import java.net.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class userJFrame extends javax.swing.JFrame 
{
    private static InetAddress host;
    private static final int PORT = 1234;
    private static Socket socket = null;
    private static PrintWriter out = null;
    private static String nickname = "";

    /**
     * Creates new form userJFrame
     */
    public userJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        nicknameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        sendNickname = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        receivedMessageArea = new javax.swing.JTextArea();
        messageInput = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();

        jDialog1.setSize(new java.awt.Dimension(340, 220));

        nicknameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicknameFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter your nickname :)");

        sendNickname.setText("That's me!");
        sendNickname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendNicknameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(sendNickname)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendNickname)
                .addGap(83, 83, 83))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        receivedMessageArea.setEditable(false);
        receivedMessageArea.setColumns(20);
        receivedMessageArea.setRows(5);
        receivedMessageArea.setFocusable(false);
        jScrollPane1.setViewportView(receivedMessageArea);

        messageInput.setText("Enter your message!");
        messageInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                messageInputFocusGained(evt);
            }
        });
        messageInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageInputActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageInput))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(sendButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(loginButton)))
                .addContainerGap(178, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageInput, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if(nickname.equals("")){
            receivedMessageArea.append("You cannot send any messages if you haven't logged in!\n");
            messageInput.setText("Enter your message!");
            return;
        }
        
        String toSend = messageInput.getText();
        out.println(nickname + ": " + toSend);
        messageInput.setText("");
        if(toSend.equals("Bye!"))
            sendButton.setEnabled(false);
    }//GEN-LAST:event_sendButtonActionPerformed

    private void messageInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageInputActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        jDialog1.setVisible(true);
        receivedMessageArea.setText("");
    }//GEN-LAST:event_loginButtonActionPerformed

    private void nicknameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicknameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nicknameFieldActionPerformed

    private void sendNicknameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendNicknameActionPerformed
        nickname = nicknameField.getText();
        out.println(nickname);
        jDialog1.setVisible(false);
        loginButton.setVisible(false);
    }//GEN-LAST:event_sendNicknameActionPerformed

    private void messageInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_messageInputFocusGained
        if(messageInput.getText().equals("Enter your message!"))
            messageInput.setText("");
    }//GEN-LAST:event_messageInputFocusGained

    public static void main(String args[]) throws Exception
    {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(userJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(userJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(userJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(userJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        try
        {
            host = InetAddress.getLocalHost();
        }
        catch(UnknownHostException e)
        {
            System.out.println("The host could not be found!");
            System.exit(1);
        }

        socket = new Socket(host,PORT);
        userJFrame myFrame = new userJFrame();
        
        try 
        {
            out = new PrintWriter(socket.getOutputStream(),true);
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(userJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                myFrame.setVisible(true);
            }
        });
        
        ReadThread userThread = new ReadThread(socket, myFrame);
        userThread.start();    
    }
    
    public void appendMessage(String message)
    {
        receivedMessageArea.append(message);
    }
    
    public String getNickname()
    {
        return nickname;
    }
    
    public void shutDown()
    {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loginButton;
    private javax.swing.JTextField messageInput;
    private javax.swing.JTextField nicknameField;
    private javax.swing.JTextArea receivedMessageArea;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton sendNickname;
    // End of variables declaration//GEN-END:variables
}

class ReadThread extends Thread 
{
    Socket userSocket = null;
    userJFrame userFrame = null;
    Scanner in = null;
    
    ReadThread(Socket socket, userJFrame main) throws IOException{
        userSocket = socket;
        userFrame = main;
        in = new Scanner(socket.getInputStream());
    }

    @Override
    public void run() 
    {
        String message;
        do 
        {
            message = in.nextLine();
            userFrame.appendMessage(message + "\n");
            
        }while(!message.equals(userFrame.getNickname() + ": Bye!"));
        
        userFrame.appendMessage("You are now disconnected. You cannot send any messages!");

        this.interrupt();
    }
}